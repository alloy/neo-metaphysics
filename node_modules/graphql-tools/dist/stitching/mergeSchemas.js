"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var graphql_1 = require("graphql");
var TypeRegistry_1 = require("./TypeRegistry");
var resolveFromParentTypename_1 = require("./resolveFromParentTypename");
var addTypenameForFragments_1 = require("./addTypenameForFragments");
function mergeSchemas(_a) {
    var _b = _a.links, links = _b === void 0 ? [] : _b, schemas = _a.schemas, onTypeConflict = _a.onTypeConflict;
    var queryFields = {};
    var mutationFields = {};
    var typeRegistry = new TypeRegistry_1.default();
    schemas.forEach(function (schema) {
        typeRegistry.addSchema(schema);
    });
    typeRegistry.addLinks(links.map(function (link) { return (__assign({}, link, { inlineFragment: link.fragment && parseFragmentToInlineFragment(link.fragment) })); }));
    schemas.forEach(function (schema) {
        var typeMap = schema.getTypeMap();
        var queryType = schema.getQueryType();
        var mutationType = schema.getMutationType();
        lodash_1.forEach(typeMap, function (type) {
            if (graphql_1.isNamedType(type) &&
                graphql_1.getNamedType(type).name.slice(0, 2) !== '__' &&
                type !== queryType &&
                type !== mutationType) {
                var newType = void 0;
                if (graphql_1.isCompositeType(type)) {
                    newType = recreateCompositeType(schema, type, typeRegistry);
                }
                else {
                    newType = graphql_1.getNamedType(type);
                }
                typeRegistry.setType(newType.name, newType, onTypeConflict);
            }
        });
        var queryTypeFields = lodash_1.mapValues(fieldMapToFieldConfigMap(queryType.getFields(), typeRegistry), function (field, name) { return (__assign({}, field, { resolve: createForwardingResolver(typeRegistry, schema, name, 'query') })); });
        queryFields = __assign({}, queryFields, queryTypeFields);
        if (mutationType) {
            var mutationTypeFields = lodash_1.mapValues(fieldMapToFieldConfigMap(mutationType.getFields(), typeRegistry), function (field, name) { return (__assign({}, field, { resolve: createForwardingResolver(typeRegistry, schema, name, 'mutation') })); });
            mutationFields = __assign({}, mutationFields, mutationTypeFields);
        }
    });
    var query = new graphql_1.GraphQLObjectType({
        name: 'Query',
        fields: __assign({}, queryFields),
    });
    typeRegistry.setQuery(query);
    var mutation;
    if (!lodash_1.isEmpty(mutationFields)) {
        mutation = new graphql_1.GraphQLObjectType({
            name: 'Mutation',
            fields: __assign({}, mutationFields),
        });
        typeRegistry.setMutation(mutation);
    }
    return new graphql_1.GraphQLSchema({
        query: query,
        mutation: mutation,
    });
}
exports.default = mergeSchemas;
function recreateCompositeType(schema, type, registry) {
    if (type instanceof graphql_1.GraphQLObjectType) {
        var fields_1 = type.getFields();
        var interfaces_1 = type.getInterfaces();
        return new graphql_1.GraphQLObjectType({
            name: type.name,
            description: type.description,
            isTypeOf: type.isTypeOf,
            fields: function () { return (__assign({}, fieldMapToFieldConfigMap(fields_1, registry), createLinks(registry.getLinksByType(type.name), registry))); },
            interfaces: function () { return interfaces_1.map(function (iface) { return registry.resolveType(iface); }); },
        });
    }
    else if (type instanceof graphql_1.GraphQLInterfaceType) {
        var fields_2 = type.getFields();
        return new graphql_1.GraphQLInterfaceType({
            name: type.name,
            description: type.description,
            fields: function () { return (__assign({}, fieldMapToFieldConfigMap(fields_2, registry), createLinks(registry.getLinksByType(type.name), registry))); },
            resolveType: function (parent, context, info) {
                return resolveFromParentTypename_1.default(parent, info.schema);
            },
        });
    }
    else {
        return new graphql_1.GraphQLUnionType({
            name: type.name,
            description: type.description,
            types: function () {
                return type.getTypes().map(function (unionMember) { return registry.resolveType(unionMember); });
            },
            resolveType: function (parent, context, info) {
                return resolveFromParentTypename_1.default(parent, info.schema);
            },
        });
    }
}
function fieldMapToFieldConfigMap(fields, registry) {
    return lodash_1.mapValues(fields, function (field) { return fieldToFieldConfig(field, registry); });
}
function fieldToFieldConfig(field, registry) {
    return {
        type: registry.resolveType(field.type),
        args: argsToFieldConfigArgumentMap(field.args, registry),
        description: field.description,
        deprecationReason: field.deprecationReason,
    };
}
function argsToFieldConfigArgumentMap(args, registry) {
    return lodash_1.fromPairs(args.map(function (arg) { return argumentToArgumentConfig(arg, registry); }));
}
function argumentToArgumentConfig(argument, registry) {
    return [
        argument.name,
        {
            type: registry.resolveType(argument.type),
            defaultValue: argument.defaultValue,
            description: argument.description,
        },
    ];
}
function createLinks(links, registry) {
    if (!registry.query) {
        throw new Error('Somehow we do not have Query in registry');
    }
    var queryFields = registry.query.getFields();
    return lodash_1.fromPairs(links.map(function (link) {
        var field = link.to;
        var schema = registry.getSchemaByRootField(field);
        var resolver = createForwardingResolver(registry, schema, field, 'query');
        var rootField = queryFields[link.to];
        var processedArgs = lodash_1.pick(argsToFieldConfigArgumentMap(rootField.args, registry), link.args || []);
        var linkField = {
            type: rootField.type,
            args: processedArgs,
            resolve: function (parent, args, context, info) {
                var implicitArgs;
                if (link.resolveArgs) {
                    implicitArgs = link.resolveArgs(parent, args, context, info);
                }
                else {
                    implicitArgs = {};
                }
                return resolver(parent, args, context, info, implicitArgs);
            },
        };
        return [link.name, linkField];
    }));
}
function createForwardingResolver(registry, schema, rootFieldName, operation) {
    var _this = this;
    return function (root, args, context, info, implicitArgs) {
        if (implicitArgs === void 0) { implicitArgs = {}; }
        return __awaiter(_this, void 0, void 0, function () {
            var type, graphqlDoc, operationDefinition, variableValues, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (operation === 'query') {
                            type = schema.getQueryType();
                        }
                        else {
                            type = schema.getMutationType();
                        }
                        if (!type) return [3 /*break*/, 2];
                        graphqlDoc = createDocument(registry, schema, type, rootFieldName, operation, info.fieldNodes, info.fragments, info.operation.variableDefinitions);
                        operationDefinition = graphqlDoc.definitions.find(function (_a) {
                            var kind = _a.kind;
                            return kind === graphql_1.Kind.OPERATION_DEFINITION;
                        });
                        variableValues = void 0;
                        if (operationDefinition &&
                            operationDefinition.kind === graphql_1.Kind.OPERATION_DEFINITION &&
                            operationDefinition.variableDefinitions) {
                            variableValues = lodash_1.fromPairs(operationDefinition.variableDefinitions.map(function (definition) {
                                var key = definition.variable.name.value;
                                // (XXX) This is kinda hacky
                                var actualKey = key;
                                if (actualKey.startsWith('_')) {
                                    actualKey = actualKey.slice(1);
                                }
                                var value = implicitArgs[actualKey] || args[key] || info.variableValues[key];
                                return [key, value];
                            }));
                        }
                        return [4 /*yield*/, graphql_1.execute(schema, graphqlDoc, info.rootValue, context, variableValues)];
                    case 1:
                        result = _a.sent();
                        // const print = require('graphql').print;
                        // console.log(
                        //   'RESULT FROM FORWARDING\n',
                        //   print(graphqlDoc),
                        //   '\n',
                        //   JSON.stringify(variableValues, null, 2),
                        //   '\n',
                        //   JSON.stringify(result, null, 2),
                        // );
                        if (result.errors) {
                            throw new Error(result.errors[0].message);
                        }
                        else {
                            return [2 /*return*/, result.data[rootFieldName]];
                        }
                        _a.label = 2;
                    case 2: throw new Error('Could not forward to merged schema');
                }
            });
        });
    };
}
function createDocument(registry, schema, type, rootFieldName, operation, selections, fragments, variableDefinitions) {
    var rootField = type.getFields()[rootFieldName];
    var requiredArgs = rootField.args.filter(function (arg) { return arg.type instanceof graphql_1.GraphQLNonNull; });
    var requiredArgMap = lodash_1.keyBy(requiredArgs, function (arg) { return arg.name; });
    var newVariables = [];
    var rootSelectionSet = {
        kind: graphql_1.Kind.SELECTION_SET,
        // (XXX) This (wrongly) assumes only having one fieldNode
        selections: selections.map(function (selection) {
            if (selection.kind === graphql_1.Kind.FIELD) {
                var _a = processRootField(selection, rootFieldName, requiredArgs), newSelection = _a.selection, variables = _a.variables;
                newVariables.push.apply(newVariables, variables);
                return newSelection;
            }
            else {
                return selection;
            }
        }),
    };
    var newVariableDefinitions = newVariables.map(function (_a) {
        var arg = _a.arg, variable = _a.variable;
        var argDef = requiredArgMap[arg];
        if (!argDef) {
            throw new Error('Unexpected missing arg');
        }
        var typeName = typeToAst(argDef.type);
        return {
            kind: graphql_1.Kind.VARIABLE_DEFINITION,
            variable: {
                kind: graphql_1.Kind.VARIABLE,
                name: {
                    kind: graphql_1.Kind.NAME,
                    value: variable,
                },
            },
            type: typeName,
        };
    });
    var _a = filterSelectionSetDeep(registry, schema, type, rootSelectionSet, fragments), selectionSet = _a.selectionSet, processedFragments = _a.fragments, usedVariables = _a.usedVariables;
    var operationDefinition = {
        kind: graphql_1.Kind.OPERATION_DEFINITION,
        operation: operation,
        variableDefinitions: (variableDefinitions || [])
            .filter(function (variableDefinition) {
            return usedVariables.includes(variableDefinition.variable.name.value);
        }).concat(newVariableDefinitions),
        selectionSet: selectionSet,
    };
    var newDoc = {
        kind: graphql_1.Kind.DOCUMENT,
        definitions: [operationDefinition].concat(processedFragments),
    };
    var newDocWithTypenames = addTypenameForFragments_1.default(newDoc, schema);
    return newDocWithTypenames;
}
function processRootField(selection, rootFieldName, requiredArgs) {
    var existingArguments = selection.arguments || [];
    var existingArgumentNames = existingArguments.map(function (arg) { return arg.name.value; });
    var missingArgumentNames = lodash_1.difference(requiredArgs.map(function (arg) { return arg.name; }), existingArgumentNames);
    var variables = [];
    var missingArguments = missingArgumentNames.map(function (name) {
        // (XXX): really needs better var generation
        var variableName = "_" + name;
        variables.push({
            arg: name,
            variable: variableName,
        });
        return {
            kind: graphql_1.Kind.ARGUMENT,
            name: {
                kind: graphql_1.Kind.NAME,
                value: name,
            },
            value: {
                kind: graphql_1.Kind.VARIABLE,
                name: {
                    kind: graphql_1.Kind.NAME,
                    value: variableName,
                },
            },
        };
    });
    return {
        selection: {
            kind: graphql_1.Kind.FIELD,
            alias: null,
            arguments: existingArguments.concat(missingArguments),
            selectionSet: selection.selectionSet,
            name: {
                kind: graphql_1.Kind.NAME,
                value: rootFieldName,
            },
        },
        variables: variables,
    };
}
function filterSelectionSetDeep(registry, schema, type, selectionSet, fragments) {
    var validFragments = lodash_1.values(fragments)
        .filter(function (node) {
        var typeName = node.typeCondition.name.value;
        var innerType = schema.getType(typeName);
        return Boolean(innerType);
    })
        .map(function (node) { return node.name.value; });
    var _a = filterSelectionSet(registry, schema, type, selectionSet, validFragments), newSelectionSet = _a.selectionSet, remainingFragments = _a.usedFragments, usedVariables = _a.usedVariables;
    var newFragments = {};
    // (XXX): So this will break if we have a fragment that only has link fields
    while (remainingFragments.length > 0) {
        var name_1 = remainingFragments.pop();
        if (newFragments[name_1]) {
            continue;
        }
        else {
            var nextFragment = fragments[name_1];
            if (!name_1) {
                throw new Error("Could not find fragment " + name_1);
            }
            var typeName = nextFragment.typeCondition.name.value;
            var innerType = schema.getType(typeName);
            if (!innerType) {
                continue;
            }
            var _b = filterSelectionSet(registry, schema, innerType, nextFragment.selectionSet, validFragments), fragmentSelectionSet = _b.selectionSet, fragmentUsedFragments = _b.usedFragments, fragmentUsedVariables = _b.usedVariables;
            remainingFragments = lodash_1.union(remainingFragments, fragmentUsedFragments);
            usedVariables = lodash_1.union(usedVariables, fragmentUsedVariables);
            newFragments[name_1] = {
                kind: graphql_1.Kind.FRAGMENT_DEFINITION,
                name: {
                    kind: graphql_1.Kind.NAME,
                    value: name_1,
                },
                typeCondition: nextFragment.typeCondition,
                selectionSet: fragmentSelectionSet,
            };
        }
    }
    return {
        selectionSet: newSelectionSet,
        fragments: lodash_1.values(newFragments),
        usedVariables: usedVariables,
    };
}
function filterSelectionSet(registry, schema, type, selectionSet, validFragments) {
    var usedFragments = [];
    var usedVariables = [];
    var typeStack = [type];
    var filteredSelectionSet = graphql_1.visit(selectionSet, (_a = {},
        _a[graphql_1.Kind.FIELD] = {
            enter: function (node) {
                var parentType = resolveType(typeStack[typeStack.length - 1]);
                if (parentType instanceof graphql_1.GraphQLNonNull ||
                    parentType instanceof graphql_1.GraphQLList) {
                    parentType = parentType.ofType;
                }
                if (parentType instanceof graphql_1.GraphQLObjectType ||
                    parentType instanceof graphql_1.GraphQLInterfaceType) {
                    var fields = parentType.getFields();
                    var field = fields[node.name.value];
                    if (!field) {
                        var link = registry.getLinkByAddress(parentType.name, node.name.value);
                        if (link && link.inlineFragment) {
                            return link.inlineFragment;
                        }
                        else {
                            return null;
                        }
                    }
                    else {
                        typeStack.push(field.type);
                    }
                }
            },
            leave: function () {
                typeStack.pop();
            },
        },
        _a[graphql_1.Kind.FRAGMENT_SPREAD] = function (node) {
            if (validFragments.includes(node.name.value)) {
                usedFragments.push(node.name.value);
            }
            else {
                return null;
            }
        },
        _a[graphql_1.Kind.INLINE_FRAGMENT] = {
            enter: function (node) {
                if (node.typeCondition) {
                    var innerType = schema.getType(node.typeCondition.name.value);
                    if (innerType) {
                        typeStack.push(innerType);
                    }
                    else {
                        return null;
                    }
                }
            },
            leave: function (node) {
                if (node.typeCondition) {
                    var innerType = schema.getType(node.typeCondition.name.value);
                    if (innerType) {
                        typeStack.pop();
                    }
                    else {
                        return null;
                    }
                }
            },
        },
        _a[graphql_1.Kind.VARIABLE] = function (node) {
            usedVariables.push(node.name.value);
        },
        _a));
    return {
        selectionSet: filteredSelectionSet,
        usedFragments: usedFragments,
        usedVariables: usedVariables,
    };
    var _a;
}
function resolveType(type) {
    var lastType = type;
    while (lastType instanceof graphql_1.GraphQLNonNull ||
        lastType instanceof graphql_1.GraphQLList) {
        lastType = lastType.ofType;
    }
    return lastType;
}
function typeToAst(type) {
    if (type instanceof graphql_1.GraphQLNonNull) {
        var innerType = typeToAst(type.ofType);
        if (innerType.kind === graphql_1.Kind.LIST_TYPE ||
            innerType.kind === graphql_1.Kind.NAMED_TYPE) {
            return {
                kind: graphql_1.Kind.NON_NULL_TYPE,
                type: innerType,
            };
        }
        else {
            throw new Error('Incorrent inner non-null type');
        }
    }
    else if (type instanceof graphql_1.GraphQLList) {
        return {
            kind: graphql_1.Kind.LIST_TYPE,
            type: typeToAst(type.ofType),
        };
    }
    else {
        return {
            kind: graphql_1.Kind.NAMED_TYPE,
            name: {
                kind: graphql_1.Kind.NAME,
                value: type.toString(),
            },
        };
    }
}
function parseFragmentToInlineFragment(definitions) {
    var document = graphql_1.parse(definitions);
    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {
        var definition = _a[_i];
        if (definition.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {
            return {
                kind: graphql_1.Kind.INLINE_FRAGMENT,
                typeCondition: definition.typeCondition,
                selectionSet: definition.selectionSet,
            };
        }
    }
    throw new Error('Could not parse fragment');
}
//# sourceMappingURL=mergeSchemas.js.map